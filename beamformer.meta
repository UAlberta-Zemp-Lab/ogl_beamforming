@Enumeration(DataKind [Int16 Int16Complex Float32 Float32Complex])
@Enumeration(DecodeMode [None Hadamard])
@Enumeration(RCAOrientation [Rows Columns])
@Enumeration(SamplingMode [2X 4X])

@ShaderGroup Compute
{
	@Shader CudaDecode
	@Shader CudaHilbert

	@Shader(decode.glsl) Decode
	{
		@Enumeration(DataKind)
		@Enumeration(DecodeMode)
		@Flags([DilateOutput])

		@Bake
		{
			@BakeVariable(DataKind             data_kind             )
			@BakeVariable(DecodeMode           decode_mode           )
			@BakeVariable(InputChannelStride   input_channel_stride  )
			@BakeVariable(InputSampleStride    input_sample_stride   )
			@BakeVariable(InputTransmitStride  input_transmit_stride )
			@BakeVariable(OutputChannelStride  output_channel_stride )
			@BakeVariable(OutputSampleStride   output_sample_stride  )
			@BakeVariable(OutputTransmitStride output_transmit_stride)
			@BakeVariable(ShaderFlags          shader_flags          )
			@BakeVariable(TransmitCount        transmit_count        )
		}
	}

	@Shader(filter.glsl) Filter
	{
		@Enumeration(DataKind)
		@Enumeration(SamplingMode)
		@Flags([ComplexFilter MapChannels])

		@Bake
		{
			@BakeVariable(DataKind             data_kind             )
			@BakeVariable(DecimationRate       decimation_rate       )
			@BakeVariable(FilterLength         filter_length         )
			@BakeVariable(InputChannelStride   input_channel_stride  )
			@BakeVariable(InputSampleStride    input_sample_stride   )
			@BakeVariable(InputTransmitStride  input_transmit_stride )
			@BakeVariable(OutputChannelStride  output_channel_stride )
			@BakeVariable(OutputSampleStride   output_sample_stride  )
			@BakeVariable(OutputTransmitStride output_transmit_stride)
			@BakeVariable(ShaderFlags          shader_flags          )
			@BakeVariable(SamplingMode         sampling_mode         )
		}

		@SubShader Demodulate
	}

	@Shader(das.glsl) DAS
	{
		@Enumeration(DataKind)
		@Enumeration(RCAOrientation)
		@Flags([Fast Sparse Interpolate CoherencyWeighting])

		@Bake
		{
			@BakeVariable(AcquisitionCount acquisition_count)
			@BakeVariable(ChannelCount     channel_count    )
			@BakeVariable(DataKind         data_kind        )
			@BakeVariable(SampleCount      sample_count     )
			@BakeVariable(ShaderFlags      shader_flags     )
			@BakeVariable(ShaderKind       shader_kind      )
		}
	}

	@Shader(min_max.glsl) MinMax
	@Shader(sum.glsl) Sum
}

@ShaderGroup Render
{
	@Shader(render_3d.frag.glsl) Render3D
}
